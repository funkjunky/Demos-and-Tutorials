#include <iostream>
#include <string>
#include <GL/gl.h>
#include <GL/glu.h>
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>

using namespace std;

struct mykeys{
	mykeys()
		:up(false), down(false), left(false), right(false), forward(false), back(false), plus(false), neg(false)
	{}

	bool up;
	bool down;
	bool left;
	bool right;
	bool forward;
	bool back;
	bool plus;
	bool neg;
};

mykeys ispressed();
float x=0,y=0,z=0;

void cleanup()
{
	SDL_Quit();
	exit(0);
}

void processkeys()
{
	if(ispressed.up)
		y+=.01;
	if(ispressed.down)
		y-=.01;
	if(ispressed.left)
		x+=.01;
	if(ispressed.right)
		x-=.01;
	if(ispressed.forward)
		z+=.01;
	if(ispressed.back)
		z-=.01;
}

void handleKeys(SDL_keysym* keysym, bool state)	//key listener. 
{						//State could be considered whether the key was pressed or released.

	switch(keysym->sym)	//this holds the key that triggered the event.
	{
		case SDLK_ESCAPE: if(!state) cleanup();	//if escape is released.
					break;
		case SDLK_UP:	ispressed.up=state;
					break;
		case SDLK_DOWN:	ispressed.down=state;
					break;
		case SDLK_LEFT:	ispressed.left=state;
					break;
		case SDLK_RIGHT:ispressed.right=state;
					break;
		case SDLK_PAGEUP:ispressed.forward=state;
					break;
		case SDLK_PAGEDOWN:ispressed.back=state;
					break;
		default: cerr << "unrecognized key..."<<endl;
	}
}

void processEvents()
{
	SDL_Event event;
	while(SDL_PollEvent(&event))
	{
		switch(event.type)
		{
			case SDL_KEYDOWN:	handleKeys(&event.key.keysym, true); 
						break;	
			case SDL_KEYUP	:	handleKeys(&event.key.keysym, false); 
						break;
			case SDL_QUIT	:	endProgram(0); break;
		}
	}
	processkeys();
}

void setupgl()	//glMatrixMode decides which stack to add the functions to (i believe), if you put it on the wrong stack, it simply doesn't work.
{
	SDL_SetVideoMode(width,height,24,SDL_OPENGL | SDL_GL_DOUBLEBUFFER);//setup window

	glViewport(0, 0, width, height);
					
	glMatrixMode(GL_PROJECTION);	//setup where the projection will be coming from
		gluPerspective(45, (float)width/height, .1, 100);//generally this is it.

	glMatrixMode(GL_MODELVIEW);	//after setting up projection, setup modelview...
	//model view is how you view the models, therefor it appears to be something you use from here on in.
	glPolygonMode(GL_BACK, GL_LINE);	//wireframe.
	glPolygonMode(GL_FRONT, GL_LINE);
}

void drawprism(float xx, float yy, float zz, float width, float height, float depth)
{
	glBegin(GL_QUADS);
		glVertex3f(xx, yy, zz);		//bottom-left
		glVertex3f(xx, yy+height, zz);	//top-left
		glVertex3f(xx+width, yy+height, zz);	//top-right
		glVertex3f(xx+width, yy, zz);		//bottom-right
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(xx, yy, zz-depth);		//bottom-left
		glVertex3f(xx, yy+height, zz-depth);	//top-left
		glVertex3f(xx+width, yy+height, zz-depth);	//top-right
		glVertex3f(xx+width, yy, zz-depth);		//bottom-right
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(xx, yy, zz-depth);
		glVertex3f(xx, yy+height, zz-depth);
		glVertex3f(xx, yy+height, zz);
		glVertex3f(xx, yy, zz);
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(xx+width, yy, zz-depth);
		glVertex3f(xx+width, yy+height, zz-depth);
		glVertex3f(xx+width, yy+height, zz);
		glVertex3f(xx+width, yy, zz);
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(xx, yy, zz);
		glVertex3f(xx, yy, zz-depth);
		glVertex3f(xx+width, yy, zz-depth);
		glVertex3f(xx+width, yy, zz);		
	glEnd();

	glBegin(GL_QUADS);
		glVertex3f(xx, yy+height, zz);
		glVertex3f(xx, yy+height, zz-depth);
		glVertex3f(xx+width, yy+height, zz-depth);
		glVertex3f(xx+width, yy+height, zz);		
	glEnd();
}

void mainloop()
{
	while(true)	//encapsulates everything!
	{
		processEvents();	//process input devices.

		glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);	//clear screen.

		////Begin: Draw things!////
		glTranslatef(x,y,z-10);
		drawprism(-2,-4,0,2,8,2);
		drawprism(2,-4,0,2,8,2);
		drawprism(0,-1,0,1,1,1);
		////End: Draw things!////

		SDL_GL_SwapBuffers();	//places objects in memory on the screen.
	}
}

int main()
{
	setupgl();
	mainloop();
	//currently this is unreachable
	cleanup();
}
